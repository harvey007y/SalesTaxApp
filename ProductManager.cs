using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection.Emit;
using System.Text;

namespace SalesTaxApp
{
    /// <summary>
    /// ProductManager class is for the business logic end and application work
    /// that is done for the GUI.  This class creates and
    /// holds an list of Product objects and each object holds its own data and
    /// applicable methods. 
    /// </summary>
    public class ProductManager
    {
        // Main List to hold products for the application
        public ObservableCollection<Product> productList;

        /// <summary>
        /// method ProductManager()
        /// Description: Constructor for the ProductManager class
        /// Instantiates the productList object with Product type objects
        /// Inputs: None
        /// Outputs: None
        /// </summary>
        public ProductManager()
        {
            
       
        } // end of ProductManager()
        public ObservableCollection<Product> GetProducts()
        {
            List<Product> list = new List<Product>();
            productList = new ObservableCollection<Product>();

                // ********************************************************************
                // Code Generated by Ideal Tools Organizer at http://idealautomate.com
                // ********************************************************************
                // Define Query String
                string queryString =
                "SELECT [Id] " +
                ",[Description] " +
                ",[Price] " +
                ",[Quantity] " +
                ",[IsBook] " +
                ",[IsFood] " +
                ",[IsMedical] " +
                ",[IsImported] " +
                ",[BasePrice] " +
                ",[Tax] " +
                ",[TotalPrice] " +
                ",[LastCalculatedTax] " +
                ",[LastCalculatedTotalPrice] " +
                "FROM [dbo].[SalesTaxProducts] " +
               "";
                // Define Connection String
                string strConnectionString = null;
                strConnectionString = @"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI";
                // Define .net fields to hold each column selected in query
                Int32 int_SalesTaxProducts_Id;
                String str_SalesTaxProducts_Description;
                Decimal dec_SalesTaxProducts_Price;
                Int32 int_SalesTaxProducts_Quantity;
                Boolean bool_SalesTaxProducts_IsBook;
                Boolean bool_SalesTaxProducts_IsFood;
                Boolean bool_SalesTaxProducts_IsMedical;
                Boolean bool_SalesTaxProducts_IsImported;
                Decimal dec_SalesTaxProducts_BasePrice;
                Decimal dec_SalesTaxProducts_Tax;
                Decimal dec_SalesTaxProducts_TotalPrice;
                Decimal dec_SalesTaxProducts_LastCalculatedTax;
                Decimal dec_SalesTaxProducts_LastCalculatedTotalPrice;
                // Define a datatable that we will define columns in to match the columns
                // selected in the query. We will use sqldatareader to read the results
                // from the sql query one row at a time. Then we will add each of those
                // rows to the datatable - this is where you can modify the information
                // returned from the sql query one row at a time. Finally, we will
                // bind the table to the gridview.
                DataTable dt = new DataTable();

                using (SqlConnection connection = new SqlConnection(strConnectionString))
                {
                    SqlCommand command = new SqlCommand(queryString, connection);

                    connection.Open();

                    SqlDataReader reader = command.ExecuteReader();
                    // Define a column in the table for each column that was selected in the sql query 
                    // We do this before the sqldatareader loop because the columns only need to be  
                    // defined once. 

                    DataColumn column = null;
                    column = new DataColumn("SalesTaxProducts_Id", Type.GetType("System.Int32"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_Description", Type.GetType("System.String"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_Price", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_Quantity", Type.GetType("System.Int32"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_IsBook", Type.GetType("System.Boolean"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_IsFood", Type.GetType("System.Boolean"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_IsMedical", Type.GetType("System.Boolean"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_IsImported", Type.GetType("System.Boolean"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_BasePrice", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_Tax", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_TotalPrice", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_LastCalculatedTax", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    column = new DataColumn("SalesTaxProducts_LastCalculatedTotalPrice", Type.GetType("System.Decimal"));
                    dt.Columns.Add(column);
                    // Read the results from the sql query one row at a time 
                    while (reader.Read())
                    {
                        // define a new datatable row to hold the row read from the sql query 
                        DataRow dataRow = dt.NewRow();
                        // Move each field from the reader to a holding field in .net 
                        // ******************************************************************** 
                        // The holding field in .net is where you can alter the contents of the 
                        // field 
                        // ******************************************************************** 
                        // Then, you move the contents of the holding .net field to the column in 
                        // the datarow that you defined above 
                        if (!(reader.IsDBNull(0)))
                        {
                            int_SalesTaxProducts_Id = reader.GetInt32(0);
                            dataRow["SalesTaxProducts_Id"] = int_SalesTaxProducts_Id;
                        }
                        if (!(reader.IsDBNull(1)))
                        {
                            str_SalesTaxProducts_Description = reader.GetString(1);
                            dataRow["SalesTaxProducts_Description"] = str_SalesTaxProducts_Description;
                        }
                        if (!(reader.IsDBNull(2)))
                        {
                            dec_SalesTaxProducts_Price = reader.GetDecimal(2);
                            dataRow["SalesTaxProducts_Price"] = dec_SalesTaxProducts_Price;
                        }
                        if (!(reader.IsDBNull(3)))
                        {
                            int_SalesTaxProducts_Quantity = reader.GetInt32(3);
                            dataRow["SalesTaxProducts_Quantity"] = int_SalesTaxProducts_Quantity;
                        }
                        if (!(reader.IsDBNull(4)))
                        {
                            bool_SalesTaxProducts_IsBook = reader.GetBoolean(4);
                            dataRow["SalesTaxProducts_IsBook"] = bool_SalesTaxProducts_IsBook;
                        }
                        if (!(reader.IsDBNull(5)))
                        {
                            bool_SalesTaxProducts_IsFood = reader.GetBoolean(5);
                            dataRow["SalesTaxProducts_IsFood"] = bool_SalesTaxProducts_IsFood;
                        }
                        if (!(reader.IsDBNull(6)))
                        {
                            bool_SalesTaxProducts_IsMedical = reader.GetBoolean(6);
                            dataRow["SalesTaxProducts_IsMedical"] = bool_SalesTaxProducts_IsMedical;
                        }
                        if (!(reader.IsDBNull(7)))
                        {
                            bool_SalesTaxProducts_IsImported = reader.GetBoolean(7);
                            dataRow["SalesTaxProducts_IsImported"] = bool_SalesTaxProducts_IsImported;
                        }
                        if (!(reader.IsDBNull(8)))
                        {
                            dec_SalesTaxProducts_BasePrice = reader.GetDecimal(8);
                            dataRow["SalesTaxProducts_BasePrice"] = dec_SalesTaxProducts_BasePrice;
                        }
                        if (!(reader.IsDBNull(9)))
                        {
                            dec_SalesTaxProducts_Tax = reader.GetDecimal(9);
                            dataRow["SalesTaxProducts_Tax"] = dec_SalesTaxProducts_Tax;
                        }
                        if (!(reader.IsDBNull(10)))
                        {
                            dec_SalesTaxProducts_TotalPrice = reader.GetDecimal(10);
                            dataRow["SalesTaxProducts_TotalPrice"] = dec_SalesTaxProducts_TotalPrice;
                        }
                        if (!(reader.IsDBNull(11)))
                        {
                            dec_SalesTaxProducts_LastCalculatedTax = reader.GetDecimal(11);
                            dataRow["SalesTaxProducts_LastCalculatedTax"] = dec_SalesTaxProducts_LastCalculatedTax;
                        }
                        if (!(reader.IsDBNull(12)))
                        {
                            dec_SalesTaxProducts_LastCalculatedTotalPrice = reader.GetDecimal(12);
                            dataRow["SalesTaxProducts_LastCalculatedTotalPrice"] = dec_SalesTaxProducts_LastCalculatedTotalPrice;
                        }
                        // Add the row to the datatable 
                        dt.Rows.Add(dataRow);
                    }

                    // Call Close when done reading. 
                    reader.Close();
                }

                int ctr = 0;
                foreach (DataRow item in dt.Rows)
                {
                    Product dataItem = new Product();
                    dataItem.Id = Int32.Parse(item["SalesTaxProducts_Id"].ToString());
                    dataItem.Description = item["SalesTaxProducts_Description"].ToString();
                    Decimal money = 0.00M;
                    if (item["SalesTaxProducts_Price"] != null)
                    {
                        Decimal.TryParse(item["SalesTaxProducts_Price"].ToString(), out money);
                    }
                    dataItem.Price = money;

                    int amt = 0;
                    if (item["SalesTaxProducts_Quantity"] != null)
                    {
                        Int32.TryParse(item["SalesTaxProducts_Quantity"].ToString(), out amt);
                    }
                    dataItem.Quantity = amt;
                bool myResult = item["SalesTaxProducts_IsBook"] != null;
                    if (!(item["SalesTaxProducts_IsBook"].Equals(System.DBNull.Value)) && (bool)item["SalesTaxProducts_IsBook"])
                    {
                        dataItem.IsBook = true;
                    }
                    else
                    {
                        dataItem.IsBook = false;
                    }

                if (!(item["SalesTaxProducts_IsFood"].Equals(System.DBNull.Value)) && (bool)item["SalesTaxProducts_IsFood"])
                    {
                        dataItem.IsFood = true;
                    }
                    else
                    {
                        dataItem.IsFood = false;
                    }

                if (!(item["SalesTaxProducts_IsMedical"].Equals(System.DBNull.Value)) && (bool)item["SalesTaxProducts_IsMedical"])
                    {
                        dataItem.IsMedical = true;
                    }
                    else
                    {
                        dataItem.IsMedical = false;
                    }

                if (!(item["SalesTaxProducts_IsImported"].Equals(System.DBNull.Value)) && (bool)item["SalesTaxProducts_IsImported"])
                    {
                        dataItem.IsImported = true;
                    }
                    else
                    {
                        dataItem.IsImported = false;
                    }




                    productList.Add(dataItem);
                }


            return productList;
        }

        public void Upsert(Product myProduct)
        {
            SqlConnection thisConnection = new SqlConnection(@"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI");

            //Create Command object
            SqlCommand nonqueryCommand = thisConnection.CreateCommand();

            try
            {
                // Open Connection
                thisConnection.Open();
                Console.WriteLine("Connection Opened");

                // Create INSERT statement with named parameters
                nonqueryCommand.CommandText =
                   " IF NOT EXISTS(SELECT* FROM dbo.SalesTaxProducts WHERE ID = @Id)" +

                    "INSERT INTO [dbo].[SalesTaxProducts] " +
//"           ([Id] " +
"           ([Description] " +
"           ,[Price] " +
"           ,[Quantity] " +
"           ,[IsBook] " +
"           ,[IsFood] " +
"           ,[IsMedical] " +
"           ,[IsImported] " +
"           ,[BasePrice] " +
"           ,[Tax] " +
"           ,[TotalPrice] " +
"           ,[LastCalculatedTax] " +
"           ,[LastCalculatedTotalPrice]) " +
"     VALUES " +
//"           (@Id " +
"           (@Description " +
"           ,@Price " +
"           ,@Quantity " +
"           ,@IsBook " +
"           ,@IsFood " +
"           ,@IsMedical " +
"           ,@IsImported " +
"           ,@BasePrice " +
"           ,@Tax " +
"           ,@TotalPrice " +
"           ,@LastCalculatedTax " +
"           ,@LastCalculatedTotalPrice) " +
" ELSE " +
                "UPDATE [dbo].[SalesTaxProducts] " +
"   SET [Description] = @Description " +
"      ,[Price] = @Price " +
"      ,[Quantity] = @Quantity " +
"      ,[IsBook] = @IsBook " +
"      ,[IsFood] = @IsFood " +
"      ,[IsMedical] = @IsMedical " +
"      ,[IsImported] = @IsImported " +
"      ,[BasePrice] = @BasePrice " +
"      ,[Tax] = @Tax " +
"      ,[TotalPrice] = @TotalPrice " +
"      ,[LastCalculatedTax] = @LastCalculatedTax " +
"      ,[LastCalculatedTotalPrice] = @LastCalculatedTotalPrice " +
" WHERE Id = @Id " +
"          ";


                // Add Parameters to Command Parameters collection
                nonqueryCommand.Parameters.Add("@Id", SqlDbType.Int);
                nonqueryCommand.Parameters.Add("@Description", SqlDbType.VarChar, 500);
                nonqueryCommand.Parameters.Add("@Price", SqlDbType.Money);
                nonqueryCommand.Parameters.Add("@Quantity", SqlDbType.Int);
                nonqueryCommand.Parameters.Add("@IsBook", SqlDbType.Bit);
                nonqueryCommand.Parameters.Add("@IsFood", SqlDbType.Bit);
                nonqueryCommand.Parameters.Add("@IsMedical", SqlDbType.Bit);
                nonqueryCommand.Parameters.Add("@IsImported", SqlDbType.Bit);
                nonqueryCommand.Parameters.Add("@BasePrice", SqlDbType.Money);
                nonqueryCommand.Parameters.Add("@Tax", SqlDbType.Money);
                nonqueryCommand.Parameters.Add("@TotalPrice", SqlDbType.Money);
                nonqueryCommand.Parameters.Add("@LastCalculatedTax", SqlDbType.Money);
                nonqueryCommand.Parameters.Add("@LastCalculatedTotalPrice", SqlDbType.Money);

                // Prepare command for repeated execution
                nonqueryCommand.Prepare();

                // Data to be inserted

                    nonqueryCommand.Parameters["@Id"].Value = myProduct.Id;
                nonqueryCommand.Parameters["@Description"].Value = myProduct.Description;
                nonqueryCommand.Parameters["@Price"].Value = myProduct.Price;
                nonqueryCommand.Parameters["@Quantity"].Value = myProduct.Quantity;
                nonqueryCommand.Parameters["@IsBook"].Value = myProduct.IsBook;
                nonqueryCommand.Parameters["@IsFood"].Value = myProduct.IsFood;
                nonqueryCommand.Parameters["@IsMedical"].Value = myProduct.IsMedical;
                nonqueryCommand.Parameters["@IsImported"].Value = myProduct.IsImported;
                nonqueryCommand.Parameters["@BasePrice"].Value = myProduct.BasePrice;
                nonqueryCommand.Parameters["@Tax"].Value = myProduct.Tax;
                nonqueryCommand.Parameters["@TotalPrice"].Value = myProduct.TotalPrice;
                nonqueryCommand.Parameters["@LastCalculatedTax"].Value = myProduct.LastCalculatedTax;
                nonqueryCommand.Parameters["@LastCalculatedTotalPrice"].Value = myProduct.LastCalculatedTotalPrice;

                Console.WriteLine("Executing {0}", nonqueryCommand.CommandText);
                    Console.WriteLine("Number of rows affected : {0}", nonqueryCommand.ExecuteNonQuery());
               
            }
            catch (SqlException ex)
            {
                // Display error
                Console.WriteLine("Error: " + ex.ToString());
            }
            finally
            {
                // Close Connection
                thisConnection.Close();
                Console.WriteLine("Connection Closed");

            }
        }

        public void Delete(int myId)
        {
            SqlConnection thisConnection = new SqlConnection(@"Data Source=.\SQLEXPRESS02;Initial Catalog=IdealAutomateDB;Integrated Security=SSPI");

            //Create Command object
            SqlCommand nonqueryCommand = thisConnection.CreateCommand();

            try
            {
                // Open Connection
                thisConnection.Open();
                Console.WriteLine("Connection Opened");

                // Create INSERT statement with named parameters
                nonqueryCommand.CommandText =
                   " DELETE FROM dbo.SalesTaxProducts WHERE ID = @Id"; 


                // Add Parameters to Command Parameters collection
                nonqueryCommand.Parameters.Add("@Id", SqlDbType.Int);
              

                // Prepare command for repeated execution
                nonqueryCommand.Prepare();

                // Data to be inserted

                nonqueryCommand.Parameters["@Id"].Value = myId;
                

                Console.WriteLine("Executing {0}", nonqueryCommand.CommandText);
                Console.WriteLine("Number of rows affected : {0}", nonqueryCommand.ExecuteNonQuery());

            }
            catch (SqlException ex)
            {
                // Display error
                Console.WriteLine("Error: " + ex.ToString());
            }
            finally
            {
                // Close Connection
                thisConnection.Close();
                Console.WriteLine("Connection Closed");

            }
        }

        public decimal GetTaxTotal()
        {
            decimal totTaxSum = productList.Sum(x => x.LastCalculatedTax);
            return totTaxSum;
        }

        public decimal GetPriceTotal()
        {
            decimal totPriceSum = productList.Sum(x => x.LastCalculatedTotalPrice);
            return totPriceSum;
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        #endregion
    }
}
